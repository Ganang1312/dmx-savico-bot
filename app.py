import os
import json
import collections
import math
import threading
import time
import requests
from datetime import datetime
import pytz

from flask import Flask, request, abort
from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage, FlexSendMessage
)
import pandas as pd
from apscheduler.schedulers.background import BackgroundScheduler

# --- IMPORT T·ª™ C√ÅC FILE KH√ÅC C·ª¶A B·∫†N ---
from config import CLIENT, SHEET_NAME, WORKSHEET_NAME_USERS, WORKSHEET_NAME
# TH√äM M·ªöI: Import c√°c h√†m c·∫ßn thi·∫øt ƒë·ªÉ tra c·ª©u l·ªãch
from schedule_handler import get_vietnamese_day_of_week, create_schedule_flex_message

# --- PH·∫¶N C·∫§U H√åNH: ƒê·ªåC T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG ---
CHANNEL_ACCESS_TOKEN = os.environ.get('CHANNEL_ACCESS_TOKEN')
CHANNEL_SECRET = os.environ.get('CHANNEL_SECRET')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID')
CRON_SECRET_KEY = os.environ.get('CRON_SECRET_KEY')

if not all([CHANNEL_ACCESS_TOKEN, CHANNEL_SECRET]):
    raise ValueError("L·ªói: H√£y ki·ªÉm tra l·∫°i c√°c bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render.")

allowed_ids_cache = set()

# --- KH·ªûI T·∫†O ·ª®NG D·ª§NG ---
app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def load_allowed_ids():
    global allowed_ids_cache
    try:
        print("ƒêang t·∫£i danh s√°ch ID ƒë∆∞·ª£c ph√©p...")
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME_USERS)
        list_of_ids = sheet.col_values(1)
        allowed_ids_cache = set(filter(None, list_of_ids[1:] if list_of_ids and list_of_ids[0].lower() == 'id' else list_of_ids))
        print(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(allowed_ids_cache)} ID v√†o danh s√°ch cho ph√©p.")
    except Exception as e:
        print(f"L·ªói khi t·∫£i danh s√°ch ID: {e}")
        allowed_ids_cache = set()

def keep_alive():
    ping_url = os.environ.get("RENDER_EXTERNAL_URL")
    if not ping_url:
        print("B·ªè qua ch·ª©c nƒÉng keep-alive v√¨ kh√¥ng c√≥ RENDER_EXTERNAL_URL.")
        return
    while True:
        try:
            requests.get(ping_url.rstrip('/') + "/ping", timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"L·ªói khi ping: {e}")
        time.sleep(600)

# --- H√ÄM G·ª¨I B√ÅO C√ÅO C√îNG VI·ªÜC C·ªê ƒê·ªäNH (M·ªöI) ---
def send_static_report(shift):
    """
    H√†m n√†y g·ª≠i m·ªôt tin nh·∫Øn vƒÉn b·∫£n c·ªë ƒë·ªãnh th√¥ng b√°o c√¥ng vi·ªác
    ƒë·∫øn t·∫•t c·∫£ c√°c group ƒë∆∞·ª£c li·ªát k√™ trong Google Sheet.
    """
    print(f"B·∫Øt ƒë·∫ßu g·ª≠i b√°o c√°o c√¥ng vi·ªác c·ªë ƒë·ªãnh cho ca: {shift}")

    # --- ƒê·ªäNH NGHƒ®A N·ªòI DUNG TIN NH·∫ÆN ---
    if shift == 'sang':
        report_text = (
            "‚úÖ B√ÅO C√ÅO C√îNG VI·ªÜC CA S√ÅNG\n"
            "1Ô∏è‚É£ üì¶ Check l·ªánh chuy·ªÉn kho online (09:15)\n"
            "2Ô∏è‚É£ üöö Check ƒë∆°n GHTK chuy·ªÉn kho (09:30)\n"
            "3Ô∏è‚É£ üè∑Ô∏è Ch·∫°y t·ªß, thay gi√° TBBM, DSD (th·ª© 2 & 5) (10:00)\n"
            "4Ô∏è‚É£ üßπ R√† so√°t t·ªëc k·ªá (c√πng model, nh√≥m m√†u, s·∫°ch b·ª•i) (10:30)\n"
            "5Ô∏è‚É£ üìë Check Phi·∫øu CK / NK qu√° 7 ng√†y (11:30)\n"
            "6Ô∏è‚É£ üîß ƒê·ªï t·ªìn h√†ng T.Th√°i (l·ªói) ‚Üí G·ª≠i b·∫£o h√†nh, x·ª≠ l√Ω v·ªÅ 0 (Tr∆∞·ªõc 14:00)"
        )
    elif shift == 'chieu':
        report_text = (
            "üåô B√ÅO C√ÅO C√îNG VI·ªÜC CA CHI·ªÄU\n"
            "1Ô∏è‚É£ üì¶ Check l·ªánh online (15:15)\n"
            "2Ô∏è‚É£ üöö Check ƒë∆°n GHTK (15:30)\n"
            "3Ô∏è‚É£ üì¶üßπ S·∫Øp x·∫øp h√†ng h√≥a kho & d·ªçn b√†n l√†m vi·ªác (16:00)\n"
            "4Ô∏è‚É£ üñºÔ∏è R√† so√°t t·ªëc k·ªá (gia d·ª•ng / tivi / ·ª• gi√° s·ªëc) (16:30)\n"
            "5Ô∏è‚É£ üìä X·ª≠ l√Ω BCNB chi·ªÅu (17:30)\n"
            "6Ô∏è‚É£ üîß ƒê·ªï t·ªìn h√†ng T.Th√°i (l·ªói) ‚Üí G·ª≠i b·∫£o h√†nh, x·ª≠ l√Ω v·ªÅ 0 (Tr∆∞·ªõc 19:00)\n"
            "7Ô∏è‚É£ üì¶üöö Check GHTK / Grab (21:00)\n"
            "8Ô∏è‚É£ üì∏ Up h√¨nh m√°y c≈© / m√°y tr∆∞ng b√†y (21:30)"
        )
    else:
        print(f"L·ªói: Ca l√†m vi·ªác '{shift}' kh√¥ng h·ª£p l·ªá.")
        return

    # --- L·∫§Y DANH S√ÅCH GROUP V√Ä G·ª¨I TIN NH·∫ÆN ---
    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME_USERS)
        group_ids = sheet.col_values(1)[1:] 
        
        if not group_ids:
            print("Kh√¥ng t√¨m th·∫•y group ID n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o.")
            return

        print(f"S·∫Ω g·ª≠i th√¥ng b√°o ƒë·∫øn {len(group_ids)} group.")
        
        for group_id in group_ids:
            if group_id:
                try:
                    line_bot_api.push_message(group_id, TextSendMessage(text=report_text))
                    print(f"ƒê√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn group: {group_id}")
                except Exception as e:
                    print(f"L·ªói khi g·ª≠i ƒë·∫øn group {group_id}: {e}")
                    
    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng khi th·ª±c hi·ªán send_static_report: {e}")

# --- C√ÅC H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU B√ÅO C√ÅO (KH√îNG THAY ƒê·ªîI) ---
def parse_float_from_string(s):
    if s is None: return 0.0
    if not isinstance(s, str): s = str(s)
    clean_s = s.strip()
    if not clean_s or clean_s == '-': return 0.0
    try:
        return float(clean_s.replace(',', '.'))
    except ValueError: return 0.0

def handle_percentage_string(percent_str):
    if not percent_str: return 0.0, "0%"
    clean_str = str(percent_str).strip()
    if '%' in clean_str:
        try:
            value = float(clean_str.replace('%', '')) / 100
            return value, f"{round(value * 100)}%"
        except (ValueError, TypeError): return 0.0, "0%"
    else:
        try:
            value = float(clean_str)
            return value, f"{round(value * 100)}%"
        except (ValueError, TypeError): return 0.0, "0%"

def parse_competition_data(header_row, data_row):
    start_column_index = 6
    category_indices = collections.defaultdict(list)
    for i, header in enumerate(header_row[start_column_index:], start=start_column_index):
        if header: category_indices[header].append(i)
    results = []
    for category_name, indices in category_indices.items():
        if len(indices) == 3:
            try:
                percent_ht_val = data_row[indices[0]]
                realtime_val_str = data_row[indices[1]] if data_row[indices[1]] and data_row[indices[1]].strip() != '-' else "0"
                target_val_str = data_row[indices[2]] if data_row[indices[2]] and data_row[indices[2]].strip() != '-' else "0"
                percent_float, percent_ht_formatted = handle_percentage_string(percent_ht_val)
                results.append({"name": category_name, "realtime": parse_float_from_string(realtime_val_str), "target": target_val_str, "percent_ht": percent_ht_formatted, "percent_val": percent_float})
            except (ValueError, TypeError, IndexError): continue
    results.sort(key=lambda x: x['percent_val'], reverse=True)
    return results

def format_currency(value_str, remove_decimal=False):
    if not value_str or str(value_str).strip() == '-': return "-"
    try:
        value = parse_float_from_string(value_str)
        if remove_decimal:
            if value >= 1000: return f"{math.floor(value / 1000)} T·ª∑"
            return f"{math.floor(value)} Tr"
        else:
            if value >= 1000: return f"{round(value / 1000, 2)} T·ª∑"
            return f"{round(value, 2)} Tr"
    except (ValueError, TypeError): return "-"

def calculate_ranking(all_data, current_row):
    try:
        current_channel = (current_row[1] or "").strip()
        current_revenue = parse_float_from_string(current_row[4])
        channel_stores = []
        for row in all_data[1:]:
            if len(row) > 4 and (row[1] or "").strip() == current_channel:
                try:
                    revenue = parse_float_from_string(row[4])
                    channel_stores.append({'revenue': revenue, 'full_row': row})
                except (ValueError, TypeError): continue
        channel_stores.sort(key=lambda x: x['revenue'], reverse=True)
        rank = -1
        for i, store in enumerate(channel_stores):
            if store['full_row'] == current_row:
                rank = i + 1; break
        if rank != -1: return f"{rank}/{len(channel_stores)}"
        return "-/-"
    except (IndexError, ValueError, TypeError): return "-/-"

def create_flex_message(store_data, competition_results, ranking):
    cum = store_data[0] or "-"
    kenh = (store_data[1] or "").strip()
    sieu_thi_full = store_data[2] or "Kh√¥ng c√≥ t√™n"
    ten_sieu_thi_parts = sieu_thi_full.split(' - ')
    short_name_part = ten_sieu_thi_parts[-1] if len(ten_sieu_thi_parts) > 1 else sieu_thi_full
    ten_sieu_thi_rut_gon = f"{kenh} {short_name_part}"
    realtime_tong = format_currency(store_data[4], remove_decimal=True)
    target_tong = format_currency(store_data[3], remove_decimal=True)
    percent_float, percent_ht_tong = handle_percentage_string(store_data[5])
    tz_vietnam = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.now(tz_vietnam)
    thoi_gian = f"{now.hour}h Ng√†y {now.day}/{now.month}"
    sold_items = [item for item in competition_results if item['realtime'] > 0]
    unsold_items = [item for item in competition_results if item['realtime'] == 0]
    nh_thi_dua_dat = sum(1 for item in sold_items if item.get("percent_val", 0) >= 1)
    channel_styles = {"ƒêML": {"bg": "#1E88E5", "text": "#FFFFFF"}, "ƒêMM": {"bg": "#43A047", "text": "#FFFFFF"},"TGD": {"bg": "#FDD835", "text": "#000000"}, "AAR": {"bg": "#212121", "text": "#FFFFFF"}}
    style = channel_styles.get(kenh, {"bg": "#006c83", "text": "#FFFFFF"})
    TEXT_COLOR = "#000000"
    SEPARATOR_COLOR = "#EEEEEE"
    sold_components = []
    for item in sold_items:
        percent_val = item.get("percent_val", 0)
        color = "#00B33C" if percent_val >= 1 else ("#FFC400" if percent_val > 0.7 else "#FF3B30")
        target_display = str(parse_float_from_string(item["target"]))
        component = {"type": "box", "layout": "horizontal", "margin": "md", "paddingTop": "sm", "paddingBottom": "sm", "contents": [{"type": "text", "text": item["name"], "wrap": True, "size": "sm", "color": TEXT_COLOR, "flex": 4, "gravity": "center"},{"type": "separator", "color": SEPARATOR_COLOR},{"type": "text", "text": str(round(item["realtime"], 2)), "size": "sm", "color": TEXT_COLOR, "align": "center", "flex": 2, "gravity": "center"},{"type": "separator", "color": SEPARATOR_COLOR},{"type": "text", "text": target_display, "size": "sm", "color": TEXT_COLOR, "align": "center", "flex": 2, "gravity": "center"},{"type": "separator", "color": SEPARATOR_COLOR},{"type": "box", "layout": "vertical", "flex": 2, "contents": [{"type": "text", "text": item["percent_ht"], "size": "sm", "color": color, "align": "end", "weight": "bold", "gravity": "center"}]}]}
        sold_components.append(component)
        sold_components.append({"type": "separator", "margin": "md", "color": SEPARATOR_COLOR})
    unsold_components = []
    if unsold_items:
        unsold_components.extend([{"type": "separator", "margin": "xl", "color": SEPARATOR_COLOR}, {"type": "text", "text": "NG√ÄNH H√ÄNG CH∆ØA C√ì S·ªê:", "color": "#888888", "size": "sm", "align": "center", "margin": "lg", "weight": "bold"}])
        num_columns = 3
        columns = [[] for _ in range(num_columns)]
        for i, item in enumerate(unsold_items):
            columns[i % num_columns].append({"type": "text", "text": f"‚Ä¢ {item['name']}", "color": TEXT_COLOR, "size": "xs", "margin": "sm", "wrap": True})
        column_boxes = [{"type": "box", "layout": "vertical", "flex": 1, "contents": col} for col in columns]
        unsold_components.append({"type": "box", "layout": "horizontal", "margin": "md", "spacing": "md", "contents": column_boxes})
    percent_color = "#00B33C" if percent_float >= 1 else ("#FFC400" if percent_float > 0.7 else "#FF3B30")
    
    flex_json = {"type": "flex", "altText": f"B√°o c√°o cho {ten_sieu_thi_rut_gon}", "contents": { "type": "bubble", "size": "giga", "header": { "type": "box", "layout": "vertical", "paddingAll": "20px", "backgroundColor": style["bg"], "contents": [ {"type": "text", "text": "B√°o c√°o Realtime", "color": style["text"], "size": "lg", "align": "center", "weight": "bold"}, {"type": "text", "text": f"üè™ {ten_sieu_thi_rut_gon.upper()}", "color": style["text"], "weight": "bold", "size": "xl", "align": "center", "margin": "md", "wrap": True}, {"type": "box", "layout": "vertical", "margin": "lg", "spacing": "sm", "contents": [ {"type": "text", "text": f"‚≠ê C·ª•m: {cum}", "size": "sm", "color": style["text"]}, {"type": "text", "text": f"üïí Th·ªùi gian: {thoi_gian}", "size": "sm", "color": style["text"]}, {"type": "text", "text": f"üèÜ NH thi ƒëua ƒë·∫°t: {nh_thi_dua_dat}", "size": "sm", "color": style["text"]} ]} ] }, "body": { "type": "box", "layout": "vertical", "paddingAll": "20px", "backgroundColor": "#FFFFFF", "contents": [ {"type": "box", "layout": "horizontal", "contents": [ {"type": "box", "layout": "vertical", "flex": 1, "spacing": "sm", "contents": [ {"type": "text", "text": "üí∞ DOANH THU", "color": "#007BFF", "size": "md", "align": "center", "weight":"bold"}, {"type": "text", "text": realtime_tong, "color": "#007BFF", "size": "xxl", "weight": "bold", "align": "center"} ]}, {"type": "box", "layout": "vertical", "flex": 1, "spacing": "sm", "contents": [ {"type": "text", "text": "üéØ TARGET", "color": "#DC3545", "size": "md", "align": "center", "weight":"bold"}, {"type": "text", "text": target_tong, "color": "#DC3545", "size": "xxl", "weight": "bold", "align": "center"} ]} ]}, {"type": "text", "text": "% HO√ÄN TH√ÄNH", "color": TEXT_COLOR, "size": "md", "align": "center", "margin": "xl"}, {"type": "text", "text": percent_ht_tong, "color": percent_color, "size": "4xl", "weight": "bold", "align": "center"}, {"type": "box", "layout": "vertical", "backgroundColor": "#DDDDDD", "height": "8px", "cornerRadius": "md", "margin": "md", "contents": [ {"type": "box", "layout": "vertical", "backgroundColor": percent_color, "height": "8px", "cornerRadius": "md", "width": f"{min(100, round(percent_float * 100))}%"} ]}, {"type": "box", "layout": "horizontal", "margin": "xl", "contents": [{"type": "text", "text": "XH D.Thu K√™nh", "size": "sm", "color": TEXT_COLOR, "align": "center", "flex": 1}]}, {"type": "box", "layout": "horizontal", "contents": [{"type": "text", "text": ranking, "weight": "bold", "size": "lg", "color": TEXT_COLOR, "align": "center", "flex": 1}]}, {"type": "separator", "margin": "xl", "color": SEPARATOR_COLOR}, {"type": "box", "layout": "horizontal", "margin": "md", "contents": [{"type": "text", "text": "Ng√†nh H√†ng", "color": "#555555", "size": "sm", "flex": 4, "weight": "bold", "align": "center"}, {"type": "text", "text": "Realtime", "color": "#555555", "size": "sm", "flex": 2, "align": "center", "weight": "bold"}, {"type": "text", "text": "Target", "color": "#555555", "size": "sm", "flex": 2, "align": "center", "weight": "bold"}, {"type": "text", "text": "%HT", "color": "#555555", "size": "sm", "flex": 2, "align": "end", "weight": "bold"}]}, {"type": "separator", "margin": "md", "color": SEPARATOR_COLOR}, *sold_components, *unsold_components ] } }}
    return flex_json

def create_summary_text_message(store_data, competition_results):
    try:
        target_val = parse_float_from_string(store_data[3])
        realtime_val = parse_float_from_string(store_data[4])
        percent_float, _ = handle_percentage_string(store_data[5])
        remaining_val = target_val - realtime_val
        finished_items_count = sum(1 for item in competition_results if item['percent_val'] >= 1)
        tz_vietnam = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(tz_vietnam)
        time_str = now.strftime("%H:%M:%S")
        summary = f"üìä B√ÅO C√ÅO NHANH REAL-TIME - {time_str} üìä\n"
        summary += "-------------------\n"
        summary += f"- üéØ Target Ng√†y: {math.floor(target_val)}\n"
        summary += f"- üìà Realtime: {math.floor(realtime_val)} ({round(percent_float*100)}%)\n"
        summary += f"- üìâ C√≤n l·∫°i: {math.floor(remaining_val)}\n"
        summary += f"- üèÜ NH thi ƒëua ƒë·∫°t: {finished_items_count}/{len(competition_results)}\n"
        summary += "-------------------\n"
        summary += "üèÅ THI ƒêUA NH:\n\n"
        sold_items = [item for item in competition_results if item.get('realtime', 0) > 0]
        if sold_items:
            for item in sold_items:
                try:
                    realtime = item.get('realtime', 0)
                    target = parse_float_from_string(item.get('target', '0'))
                    remaining = target - realtime
                    percent_ht = item.get('percent_ht', '0%')
                    realtime_disp = math.floor(realtime) if realtime == math.floor(realtime) else round(realtime, 2)
                    target_disp = math.floor(target) if target == math.floor(target) else round(target, 2)
                    remaining_disp = math.floor(remaining) if remaining == math.floor(remaining) else round(remaining, 2)
                    summary += f"‚Ä¢ {item['name']}: {realtime_disp}/{target_disp} ({percent_ht}) c√≤n l·∫°i: {remaining_disp}\n"
                except (ValueError, TypeError):
                    summary += f"‚Ä¢ {item['name']}: {item.get('realtime', 0)} ({item.get('percent_ht', '0%')})\n"
        else:
            summary += "Ch∆∞a c√≥ ng√†nh h√†ng thi ƒëua n√†o ph√°t sinh doanh s·ªë."
        return TextSendMessage(text=summary)
    except Exception as e:
        print(f"L·ªói khi t·∫°o tin nh·∫Øn t√≥m t·∫Øt: {e}")
        return None

def create_leaderboard_flex_message(all_data, cluster_name=None, channel_filter=None):
    dmx_channels = ['ƒêML', 'ƒêMM', 'ƒêMS']; tgdd_channels = ['TGD', 'AAR']
    dmx_stores, tgdd_stores = [], []
    data_to_process = all_data[1:]
    if cluster_name:
        data_to_process = [row for row in data_to_process if len(row) > 0 and row[0] and row[0].strip().upper() == cluster_name.strip().upper()]
    for row in data_to_process:
        try:
            kenh = (row[1] or "").strip()
            if not kenh: continue
            store_info = {'kenh': kenh, 'sieu_thi': row[2], 'doanh_thu': parse_float_from_string(row[4])}
            if kenh in dmx_channels: dmx_stores.append(store_info)
            elif kenh in tgdd_channels: tgdd_stores.append(store_info)
        except (IndexError, ValueError, TypeError): continue
    dmx_stores.sort(key=lambda x: x['doanh_thu'], reverse=True)
    tgdd_stores.sort(key=lambda x: x['doanh_thu'], reverse=True)
    if not cluster_name: dmx_stores, tgdd_stores = dmx_stores[:20], tgdd_stores[:20]
    
    def build_leaderboard_bubble(title, stores, header_bg_color, header_text_color):
        header = {"type": "box", "layout": "vertical", "backgroundColor": header_bg_color, "paddingAll": "lg", "contents": [{"type": "text", "text": title, "weight": "bold", "size": "xl", "color": header_text_color, "align": "center", "wrap": True}]}
        body_bg_color, text_color_body, separator_color = "#FFFFFF", "#000000", "#EEEEEE"
        table_header = {"type": "box", "layout": "horizontal", "margin": "md", "paddingAll": "sm", "backgroundColor": header_bg_color, "cornerRadius": "md", "contents": [{"type": "text", "text": "STT", "weight": "bold", "size": "sm", "color": header_text_color, "flex": 1, "align": "center", "gravity":"center"},{"type": "separator", "color": separator_color},{"type": "text", "text": "K√äNH", "weight": "bold", "size": "sm", "color": header_text_color, "flex": 2, "align": "center", "gravity":"center"},{"type": "separator", "color": separator_color},{"type": "text", "text": "SI√äU TH·ªä", "weight": "bold", "size": "sm", "color": header_text_color, "flex": 6, "align": "center", "gravity":"center"},{"type": "separator", "color": separator_color},{"type": "text", "text": "RT", "weight": "bold", "size": "sm", "color": header_text_color, "flex": 2, "align": "center", "gravity":"center"}]}
        rows = [table_header, {"type": "separator", "margin": "sm", "color": separator_color}]
        for i, store in enumerate(stores):
            name_parts = store['sieu_thi'].split(' - ', 1)
            short_name = name_parts[1] if len(name_parts) > 1 else store['sieu_thi']
            row_component = {"type": "box", "layout": "horizontal", "margin": "md", "paddingTop":"sm", "paddingBottom":"sm", "contents": [{"type": "text", "text": str(i+1), "size": "sm", "color": text_color_body, "flex": 1, "gravity": "center", "align": "center"},{"type": "separator", "color": separator_color},{"type": "text", "text": store['kenh'], "size": "sm", "color": text_color_body, "flex": 2, "gravity": "center", "align": "center"},{"type": "separator", "color": separator_color},{"type": "text", "text": short_name, "size": "xs", "color": text_color_body, "flex": 6, "wrap": True, "gravity": "center"},{"type": "separator", "color": separator_color},{"type": "text", "text": str(round(store['doanh_thu'])), "size": "sm", "color": text_color_body, "flex": 2, "align": "center", "gravity": "center"}]}
            rows.append(row_component)
            if i < len(stores) -1: rows.append({"type": "separator", "margin": "sm", "color": separator_color})
        return {"type": "bubble", "size": "giga", "header": header, "body": { "type": "box", "layout": "vertical", "contents": rows, "paddingAll":"lg", "backgroundColor": body_bg_color }}
        
    if cluster_name: dmx_title, tgdd_title = f"üèÜ BXH C·ª§M {cluster_name.upper()} - ƒêMX üèÜ", f"üèÜ BXH C·ª§M {cluster_name.upper()} - TGDD üèÜ"
    else: dmx_title, tgdd_title = "üèÜ REALTIME TOP 20 ƒêMX üèÜ", "üèÜ REALTIME TOP 20 TGDD üèÜ"
    
    messages_to_return = []
    
    show_dmx = False
    show_tgdd = False

    if channel_filter is None:
        show_dmx = True
        show_tgdd = True
    elif channel_filter == 'dmx':
        show_dmx = True
    elif channel_filter == 'tgdd':
        show_tgdd = True
    elif channel_filter in dmx_channels:
        show_dmx = True
    elif channel_filter in tgdd_channels:
        show_tgdd = True

    if show_dmx and dmx_stores:
        messages_to_return.append({ "type": "flex", "altText": dmx_title, "contents": build_leaderboard_bubble(dmx_title, dmx_stores, "#1E88E5", "#FFFFFF") })
    if show_tgdd and tgdd_stores:
        messages_to_return.append({ "type": "flex", "altText": tgdd_title, "contents": build_leaderboard_bubble(tgdd_title, tgdd_stores, "#FDD835", "#000000") })
        
    return messages_to_return

# --- KH·ªûI ƒê·ªòNG C√ÅC T√ÅC V·ª§ N·ªÄN ---
load_allowed_ids()
if 'RENDER' in os.environ:
    keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
    keep_alive_thread.start()

scheduler = BackgroundScheduler(daemon=True, timezone='Asia/Ho_Chi_Minh')
# ƒê√É X√ìA T√ÅC V·ª§ NH·∫ÆC NH·ªû T·ª∞ ƒê·ªòNG (reminder_job)
scheduler.start()

# --- ƒêI·ªÇM TI·∫æP NH·∫¨N (ROUTES) ---
@app.route("/trigger-schedule", methods=['POST'])
def trigger_schedule():
    incoming_secret = request.headers.get('X-Cron-Secret')
    if not CRON_SECRET_KEY or incoming_secret != CRON_SECRET_KEY:
        print("L·ªói b·∫£o m·∫≠t: Sai ho·∫∑c thi·∫øu CRON_SECRET_KEY.")
        abort(403)
    data = request.get_json()
    schedule_type = data.get('type')
    if schedule_type not in ['pg', 'employee']:
        return "L·ªói: 'type' ph·∫£i l√† 'pg' ho·∫∑c 'employee'.", 400
    try:
        from schedule_handler import send_daily_schedule
        thread = threading.Thread(target=send_daily_schedule, args=(schedule_type,))
        thread.start()
        print(f"ƒê√£ k√≠ch ho·∫°t th√†nh c√¥ng g·ª≠i l·ªãch cho: {schedule_type}")
        return f"OK, ƒë√£ k√≠ch ho·∫°t g·ª≠i l·ªãch cho {schedule_type}.", 200
    except Exception as e:
        print(f"L·ªói khi k√≠ch ho·∫°t g·ª≠i l·ªãch: {e}")
        return f"L·ªói m√°y ch·ªß: {e}", 500
    
@app.route("/trigger-checklist", methods=['POST'])
def trigger_checklist():
    """
    Endpoint n√†y ƒë∆∞·ª£c Cron Job g·ªçi ƒë·ªÉ g·ª≠i b√°o c√°o c√¥ng vi·ªác c·ªë ƒë·ªãnh.
    ƒê√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a ƒë·ªÉ g·ªçi h√†m send_static_report.
    """
    incoming_secret = request.headers.get('X-Cron-Secret')
    if not CRON_SECRET_KEY or incoming_secret != CRON_SECRET_KEY:
        print("L·ªói b·∫£o m·∫≠t: Sai ho·∫∑c thi·∫øu CRON_SECRET_KEY.")
        abort(403)
        
    data = request.get_json()
    shift = data.get('shift')
    if shift not in ['sang', 'chieu']:
        return "L·ªói: 'shift' ph·∫£i l√† 'sang' ho·∫∑c 'chieu'.", 400
        
    try:
        # Ch·∫°y h√†m g·ª≠i b√°o c√°o trong m·ªôt lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng b·ªã timeout
        thread = threading.Thread(target=send_static_report, args=(shift,))
        thread.start()
        
        print(f"ƒê√£ k√≠ch ho·∫°t g·ª≠i b√°o c√°o c√¥ng vi·ªác c·ªë ƒë·ªãnh cho ca: {shift}")
        return f"OK, ƒë√£ k√≠ch ho·∫°t g·ª≠i b√°o c√°o ca {shift}.", 200
    except Exception as e:
        print(f"L·ªói khi k√≠ch ho·∫°t g·ª≠i b√°o c√°o: {e}")
        return f"L·ªói m√°y ch·ªß: {e}", 500

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError: abort(400)
    return 'OK'

@app.route("/ping")
def ping():
    return "OK", 200

# --- X·ª¨ L√ù N√öT B·∫§M (POSTBACK) ƒê√É B·ªä X√ìA ---
# To√†n b·ªô h√†m handle_postback v√† process_task_completion ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè.

# --- X·ª¨ L√ù TIN NH·∫ÆN CH√çNH ---
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text.strip()
    user_msg_upper = user_message.upper()
    user_id = event.source.user_id
    source_id = event.source.group_id if event.source.type == 'group' else user_id

    # --- L·ªÜNH TI·ªÜN √çCH ---
    if user_msg_upper == 'ID':
        reply_text = f'User ID: {user_id}'
        if event.source.type == 'group':
            reply_text = f'Group ID: {source_id}\n\n' + reply_text
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))
        return

    # --- L·ªÜNH XEM L·ªäCH L√ÄM VI·ªÜC ---
    schedule_type_to_send = None
    if user_msg_upper == 'NV':
        schedule_type_to_send = 'employee'
    elif user_msg_upper == 'PG':
        schedule_type_to_send = 'pg'

    if schedule_type_to_send:
        print(f"Nh·∫≠n l·ªánh xem l·ªãch '{schedule_type_to_send}'")
        try:
            from config import WORKSHEET_SCHEDULES_NAME
            sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_SCHEDULES_NAME)
            all_schedules = sheet.get_all_records()
            today_str = get_vietnamese_day_of_week()
            column_to_read = 'pg_schedule' if schedule_type_to_send == 'pg' else 'employee_schedule'
            schedule_text_today = next((row.get(column_to_read) for row in all_schedules if row.get('day_of_week') == today_str), None)
            if schedule_text_today:
                flex_content = create_schedule_flex_message(schedule_type_to_send, schedule_text_today)
                message = FlexSendMessage(alt_text=f"L·ªãch l√†m vi·ªác {schedule_type_to_send} h√¥m nay", contents=flex_content)
                line_bot_api.reply_message(event.reply_token, message)
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác cho h√¥m nay ({today_str})."))
        except Exception as e:
            print(f"L·ªói khi g·ª≠i l·ªãch l√†m vi·ªác theo l·ªánh: {e}")
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y l·ªãch l√†m vi·ªác."))
        return
        
    # --- L·ªÜNH CHECKLIST ƒê√É B·ªä X√ìA ---
    # To√†n b·ªô logic x·ª≠ l√Ω 'TEST SANG', 'RESET CHIEU' ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè.

    # --- KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P ---
    is_controlled = bool(allowed_ids_cache) and ADMIN_USER_ID
    if is_controlled and source_id not in allowed_ids_cache:
        # Cho ph√©p c√°c l·ªánh kh√¥ng c·∫ßn ki·ªÉm tra quy·ªÅn truy c·∫≠p ·ªü tr√™n ch·∫°y qua
        if user_msg_upper not in ['ID', 'NV', 'PG']:
            print(f"T·ª´ ch·ªëi truy c·∫≠p t·ª´ source_id: {source_id}")
            return

    # --- X·ª¨ L√ù B√ÅO C√ÅO REALTIME ---
    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME)
        all_data = sheet.get_all_values()
        reply_messages = []
        cluster_names = {row[0].strip().upper() for row in all_data[1:] if len(row) > 0 and row[0]}
        header_row = all_data[0]
        
        if user_msg_upper.startswith('ST '):
            supermarket_code = user_message[3:].strip()
            found_row = next((row for row in all_data[1:] if row and len(row) > 2 and row[2] and row[2].strip().split(' ')[0] == supermarket_code), None)
            if found_row:
                ranking = calculate_ranking(all_data, found_row)
                competition_results = parse_competition_data(header_row, found_row)
                reply_messages.append(FlexSendMessage(alt_text=f'B√°o c√°o ST {supermarket_code}', contents=create_flex_message(found_row, competition_results, ranking)['contents']))
                cluster_name = (found_row[0] or "").strip().upper()
                store_channel = (found_row[1] or "").strip()
                if cluster_name in cluster_names:
                    for flex_data in create_leaderboard_flex_message(all_data, cluster_name=cluster_name, channel_filter=store_channel):
                        reply_messages.append(FlexSendMessage(alt_text=flex_data['altText'], contents=flex_data['contents']))
            else:
                reply_messages.append(TextSendMessage(text=f'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ si√™u th·ªã: {supermarket_code}'))

        elif user_msg_upper == 'BXH':
            for flex_data in create_leaderboard_flex_message(all_data):
                reply_messages.append(FlexSendMessage(alt_text=flex_data['altText'], contents=flex_data['contents']))
        
        elif user_msg_upper == 'BXH1':
            for flex_data in create_leaderboard_flex_message(all_data, channel_filter='dmx'):
                reply_messages.append(FlexSendMessage(alt_text=flex_data['altText'], contents=flex_data['contents']))

        elif user_msg_upper == 'BXH2':
            for flex_data in create_leaderboard_flex_message(all_data, channel_filter='tgdd'):
                reply_messages.append(FlexSendMessage(alt_text=flex_data['altText'], contents=flex_data['contents']))
        
        elif user_msg_upper == 'MENU BOT':
            menu_text = (
                "ü§ñ MENU H∆Ø·ªöNG D·∫™N BOT ü§ñ\n"
                "-------------------\n"
                "‚úÖ B√ÅO C√ÅO REALTIME:\n"
                "‚Ä¢ `ST [M√£ ST]` - Xem b√°o c√°o chi ti·∫øt.\n"
                "  ‚Ü≥ V√≠ d·ª•: `ST 12345`\n"
                "‚Ä¢ `[T√™n C·ª•m]` - BXH doanh thu trong c·ª•m.\n"
                "  ‚Ü≥ V√≠ d·ª•: `CHG`\n"
                "‚Ä¢ `BXH` - Top 20 ƒêMX & TGDD.\n"
                "‚Ä¢ `BXH1` - Top 20 ƒêMX.\n"
                "‚Ä¢ `BXH2` - Top 20 TGDD.\n"
                "\n‚úÖ L·ªäCH L√ÄM VI·ªÜC:\n"
                "‚Ä¢ `NV` - Xem l·ªãch l√†m vi·ªác Nh√¢n vi√™n.\n"
                "‚Ä¢ `PG` - Xem l·ªãch l√†m vi·ªác PG.\n"
                "\n‚úÖ TI·ªÜN √çCH KH√ÅC:\n"
                "‚Ä¢ `ID` - L·∫•y ID c√° nh√¢n & ID nh√≥m.\n"
                "‚Ä¢ `MENU BOT` - Hi·ªÉn th·ªã l·∫°i menu n√†y."
            )
            reply_messages.append(TextSendMessage(text=menu_text))
            
        elif user_msg_upper in cluster_names:
            for flex_data in create_leaderboard_flex_message(all_data, cluster_name=user_msg_upper):
                reply_messages.append(FlexSendMessage(alt_text=flex_data['altText'], contents=flex_data['contents']))
        
        else:
            found_row = next((row for row in all_data[1:] if row and len(row) > 2 and row[2] and row[2].strip().split(' ')[0] == user_message), None)
            if found_row:
                ranking = calculate_ranking(all_data, found_row)
                competition_results = parse_competition_data(header_row, found_row)
                reply_messages.append(FlexSendMessage(alt_text='B√°o c√°o Realtime', contents=create_flex_message(found_row, competition_results, ranking)['contents']))
                summary_message = create_summary_text_message(found_row, competition_results)
                if summary_message:
                    reply_messages.append(summary_message)
        
        if reply_messages:
            line_bot_api.reply_message(event.reply_token, reply_messages)

    except Exception as e:
        print(f"!!! G·∫∂P L·ªñI NGHI√äM TR·ªåNG (B√ÅO C√ÅO): {repr(e)}")

# --- CH·∫†Y ·ª®NG D·ª§NG ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
