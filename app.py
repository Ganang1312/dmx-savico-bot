# app.py (PHI√äN B·∫¢N HO√ÄN CH·ªàNH CU·ªêI C√ôNG)

import os
import json
import collections
import math
import threading
import time
import requests
from datetime import datetime
import pytz

from flask import Flask, request, abort
from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage, FlexSendMessage, PostbackEvent
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
from apscheduler.schedulers.background import BackgroundScheduler

# --- IMPORT T·ª™ C√ÅC FILE KH√ÅC C·ª¶A B·∫†N ---
# C√°c h√†m n√†y ch·ª©a logic t·∫°o Flex Message v√† qu·∫£n l√Ω c√¥ng vi·ªác
from flex_handler import generate_checklist_flex, initialize_daily_tasks
# H√†m n√†y d√πng cho webhook ƒë·ªÉ k√≠ch ho·∫°t checklist t·ª´ b√™n ngo√†i
from checklist_scheduler import send_initial_checklist

# --- PH·∫¶N C·∫§U H√åNH: ƒê·ªåC T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG ---
CHANNEL_ACCESS_TOKEN = os.environ.get('CHANNEL_ACCESS_TOKEN')
CHANNEL_SECRET = os.environ.get('CHANNEL_SECRET')
GOOGLE_CREDS_JSON = os.environ.get('GOOGLE_CREDENTIALS_JSON')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID')
# Ch√¨a kh√≥a b√≠ m·∫≠t ƒë·ªÉ b·∫£o v·ªá webhook
CRON_SECRET_KEY = os.environ.get('CRON_SECRET_KEY')

if not all([CHANNEL_ACCESS_TOKEN, CHANNEL_SECRET, GOOGLE_CREDS_JSON]):
    raise ValueError("L·ªói: H√£y ki·ªÉm tra l·∫°i c√°c bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render.")

# --- C·∫§U H√åNH GOOGLE SHEETS ---
SCOPE = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
google_creds_dict = json.loads(GOOGLE_CREDS_JSON)
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(google_creds_dict, SCOPE)
CLIENT = gspread.authorize(CREDS)

# T√™n c√°c trang t√≠nh
SHEET_NAME = 'DATA REATIME'
WORKSHEET_NAME = 'chi_tiet_cum'
WORKSHEET_NAME_USERS = 'allowed_users'
WORKSHEET_TRACKER_NAME = 'task_tracker'

allowed_ids_cache = set()

# --- KH·ªûI T·∫†O ·ª®NG D·ª§NG ---
app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def load_allowed_ids():
    global allowed_ids_cache
    try:
        print("ƒêang t·∫£i danh s√°ch ID ƒë∆∞·ª£c ph√©p...")
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME_USERS)
        list_of_ids = sheet.col_values(1)
        allowed_ids_cache = set(filter(None, list_of_ids[1:] if list_of_ids and list_of_ids[0].lower() == 'id' else list_of_ids))
        print(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(allowed_ids_cache)} ID v√†o danh s√°ch cho ph√©p.")
    except gspread.exceptions.WorksheetNotFound:
        print(f"!!! C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y trang t√≠nh '{WORKSHEET_NAME_USERS}'. Bot s·∫Ω c√¥ng khai.")
        allowed_ids_cache = set()
    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng khi t·∫£i danh s√°ch ID: {e}")
        allowed_ids_cache = set()

def keep_alive():
    ping_url = os.environ.get("KEEP_ALIVE_URL")
    if not ping_url:
        app_url = os.environ.get("RENDER_EXTERNAL_URL")
        if app_url: ping_url = f"{app_url}/ping"
    if not ping_url:
        print("B·ªè qua ch·ª©c nƒÉng keep-alive.")
        return
    while True:
        try:
            requests.get(ping_url, timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"L·ªói khi ping: {e}")
        time.sleep(600)

if 'RENDER' in os.environ:
    keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
    keep_alive_thread.start()

load_allowed_ids()

# --- LOGIC NH·∫ÆC NH·ªû T·ª∞ ƒê·ªòNG (SCHEDULER) ---
def reminder_job():
    print("Scheduler: ƒêang ch·∫°y ki·ªÉm tra nh·∫Øc nh·ªü...")
    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_TRACKER_NAME)
        df = pd.DataFrame(sheet.get_all_records())
        
        if df.empty:
            return

        tz_vietnam = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(tz_vietnam)
        today_str = now.strftime('%Y-%m-%d')

        overdue_tasks = df[(df['date'] == today_str) & (df['status'] == 'incomplete')]

        for index, task in overdue_tasks.iterrows():
            deadline_time = datetime.strptime(str(task['deadline']), '%H:%M').time()
            deadline_dt = now.replace(hour=deadline_time.hour, minute=deadline_time.minute, second=0, microsecond=0)
            
            if now > deadline_dt:
                last_reminded_str = task.get('last_reminded')
                should_remind = False
                
                if not last_reminded_str or last_reminded_str == '':
                    should_remind = True
                else:
                    last_reminded_dt = datetime.fromisoformat(last_reminded_str)
                    if (now - last_reminded_dt).total_seconds() > 600: # Nh·∫Øc l·∫°i sau 10 ph√∫t
                        should_remind = True
                
                if should_remind:
                    group_id = str(task['group_id'])
                    reminder_text = f"üö® NH·∫ÆC NH·ªû: C√¥ng vi·ªác '{task['task_name']}' ƒë√£ qu√° h·∫°n l√∫c {task['deadline']}!"
                    print(f"G·ª≠i nh·∫Øc nh·ªü cho task: {task['task_name']} ƒë·∫øn group: {group_id}")
                    
                    line_bot_api.push_message(group_id, TextSendMessage(text=reminder_text))
                    
                    cell_list = sheet.findall(str(task['task_id']))
                    for cell in cell_list:
                        row_values = sheet.row_values(cell.row)
                        if str(row_values[0]) == group_id and row_values[1] == today_str:
                             sheet.update_cell(cell.row, 7, now.isoformat())
                             break
    except Exception as e:
        print(f"L·ªói trong reminder_job: {e}")

scheduler = BackgroundScheduler(daemon=True, timezone='Asia/Ho_Chi_Minh')
scheduler.add_job(reminder_job, 'interval', minutes=5)
scheduler.start()

# --- C√ÅC H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU B√ÅO C√ÅO (GI·ªÆ NGUY√äN T·ª™ FILE C·ª¶A B·∫†N) ---
def parse_float_from_string(s):
    if s is None: return 0.0
    if not isinstance(s, str): s = str(s)
    clean_s = s.strip()
    if not clean_s or clean_s == '-': return 0.0
    try:
        return float(clean_s.replace(',', '.'))
    except ValueError:
        return 0.0
# ... (V√† c√°c h√†m x·ª≠ l√Ω b√°o c√°o kh√°c c·ªßa b·∫°n: handle_percentage_string, parse_competition_data, v.v...)
# <<< D√ÅN C√ÅC H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU C·ª¶A B·∫†N V√ÄO ƒê√ÇY >>>

# --- ƒêI·ªÇM TI·∫æP NH·∫¨N (ROUTES) ---
@app.route("/trigger-checklist", methods=['POST'])
def trigger_checklist():
    incoming_secret = request.headers.get('X-Cron-Secret')
    if not CRON_SECRET_KEY or incoming_secret != CRON_SECRET_KEY:
        print("L·ªói b·∫£o m·∫≠t: Sai ho·∫∑c thi·∫øu CRON_SECRET_KEY.")
        abort(403)

    data = request.get_json()
    shift = data.get('shift')

    if shift not in ['sang', 'chieu']:
        return "L·ªói: 'shift' ph·∫£i l√† 'sang' ho·∫∑c 'chieu'.", 400

    try:
        thread = threading.Thread(target=send_initial_checklist, args=(shift,))
        thread.start()
        print(f"ƒê√£ k√≠ch ho·∫°t th√†nh c√¥ng checklist cho ca: {shift}")
        return f"OK, ƒë√£ k√≠ch ho·∫°t checklist ca {shift}.", 200
    except Exception as e:
        print(f"L·ªói khi k√≠ch ho·∫°t checklist: {e}")
        return f"L·ªói m√°y ch·ªß: {e}", 500

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@app.route("/ping")
def ping():
    return "OK", 200

# --- B·ªò X·ª¨ L√ù S·ª∞ KI·ªÜN (HANDLERS) ---
@handler.add(PostbackEvent)
def handle_postback(event):
    data = event.postback.data
    params = dict(x.split('=') for x in data.split('&'))
    action = params.get('action')
    group_id = event.source.group_id if event.source.type == 'group' else event.source.user_id
    
    if action == 'complete_task':
        task_id = params.get('task_id')
        shift_type = params.get('shift')
        print(f"Nh·∫≠n y√™u c·∫ßu ho√†n t·∫•t task: {task_id} t·ª´ group: {group_id}")
        try:
            sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_TRACKER_NAME)
            tz_vietnam = pytz.timezone('Asia/Ho_Chi_Minh')
            today_str = datetime.now(tz_vietnam).strftime('%Y-%m-%d')
            
            cell_list = sheet.findall(task_id)
            target_row = -1
            for cell in cell_list:
                 row_values = sheet.row_values(cell.row)
                 if str(row_values[0]) == group_id and row_values[1] == today_str:
                     target_row = cell.row
                     break
            
            if target_row != -1:
                sheet.update_cell(target_row, 6, 'complete')
                print(f"ƒê√£ c·∫≠p nh·∫≠t task {task_id} th√†nh 'complete' trong Google Sheet.")
            else:
                 print(f"Kh√¥ng t√¨m th·∫•y task {task_id} ƒë·ªÉ c·∫≠p nh·∫≠t.")

            new_flex_message = generate_checklist_flex(group_id, shift_type)
            if new_flex_message:
                line_bot_api.push_message(
                    group_id,
                    FlexSendMessage(alt_text=f"C·∫≠p nh·∫≠t checklist ca {shift_type}", contents=new_flex_message)
                )
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω postback: {e}")

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text.strip()
    user_msg_upper = user_message.upper()
    user_id = event.source.user_id
    source_id = event.source.group_id if event.source.type == 'group' else user_id

    if user_msg_upper == 'ID':
        # ... (logic l·∫•y ID)
        return

    if ADMIN_USER_ID and user_id == ADMIN_USER_ID:
        # ... (logic c√°c l·ªánh admin)
        return
            
    # --- X·ª¨ L√ù L·ªÜNH TEST V√Ä RESET CHECKLIST ---
    shift_to_process = None
    if user_msg_upper in ['TEST SANG', 'RESET SANG']:
        shift_to_process = 'sang'
    elif user_msg_upper in ['TEST CHIEU', 'RESET CHIEU']:
        shift_to_process = 'chieu'

    if shift_to_process:
        print(f"Nh·∫≠n l·ªánh '{user_msg_upper}' t·ª´ group {source_id}")
        try:
            initialize_daily_tasks(source_id, shift_to_process)
            flex_message = generate_checklist_flex(source_id, shift_to_process)
            
            if flex_message:
                line_bot_api.reply_message(
                    event.reply_token,
                    FlexSendMessage(alt_text=f"Checklist ca {shift_to_process}", contents=flex_message)
                )
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="Kh√¥ng th·ªÉ t·∫°o checklist."))
        except Exception as e:
            print(f"L·ªói khi th·ª±c thi l·ªánh test/reset: {e}")
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"G·∫∑p l·ªói: {e}"))
        return

    # --- KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P CHO B√ÅO C√ÅO REALTIME ---
    is_controlled = bool(allowed_ids_cache) and ADMIN_USER_ID
    if is_controlled and source_id not in allowed_ids_cache:
        return

    # --- X·ª¨ L√ù LOGIC B√ÅO C√ÅO REALTIME ---
    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_NAME)
        all_data = sheet.get_all_values()
        # ... (to√†n b·ªô logic x·ª≠ l√Ω b√°o c√°o realtime c·ªßa b·∫°n)
        reply_messages = []
        # ... (th√™m tin nh·∫Øn v√†o reply_messages)
        if reply_messages:
            line_bot_api.reply_message(event.reply_token, reply_messages)

    except Exception as e:
        print(f"!!! G·∫∂P L·ªñI NGHI√äM TR·ªåNG: {repr(e)}")
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text='ƒê√£ c√≥ l·ªói x·∫£y ra khi truy v·∫•n d·ªØ li·ªáu.'))

# --- CH·∫†Y ·ª®NG D·ª§NG ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
