import os
from datetime import datetime
import pytz
from linebot import LineBotApi
from linebot.models import FlexSendMessage, TextSendMessage
import re

# S·ª¨A L·ªñI: Import th√™m WORKSHEET_SCHEDULES_NAME t·ª´ config
from config import CLIENT, SHEET_NAME, WORKSHEET_SCHEDULES_NAME

# Kh·ªüi t·∫°o LineBotApi
CHANNEL_ACCESS_TOKEN = os.environ.get('CHANNEL_ACCESS_TOKEN')
if not CHANNEL_ACCESS_TOKEN:
    raise ValueError("L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng CHANNEL_ACCESS_TOKEN kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)

def get_vietnamese_day_of_week():
    """L·∫•y t√™n ng√†y trong tu·∫ßn b·∫±ng ti·∫øng Vi·ªát."""
    tz_vietnam = pytz.timezone('Asia/Ho_Chi_Minh')
    weekday = datetime.now(tz_vietnam).weekday()
    days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
    return days[weekday]

def parse_schedule_text(schedule_text):
    """Ph√¢n t√≠ch vƒÉn b·∫£n l·ªãch l√†m vi·ªác th√†nh c√°c ca v√† nh√¢n vi√™n."""
    # C√°c t·ª´ kh√≥a ƒë·ªÉ ph√¢n t√°ch c√°c ca
    keywords = ["Ca S√°ng", "Ca Chi·ªÅu", "Ngh·ªâ", "V·ªá Sinh Kho"]
    
    # T·∫°o m·ªôt pattern regex ƒë·ªÉ t√¨m c√°c t·ª´ kh√≥a
    pattern = '|'.join(keywords)
    parts = re.split(f'({pattern})', schedule_text)
    
    schedule_parts = []
    # B·ªè qua ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n n·∫øu n√≥ tr·ªëng
    i = 1 if parts[0].strip() == "" else 0
    while i < len(parts) - 1:
        keyword = parts[i].strip()
        # L·∫•y n·ªôi dung cho ƒë·∫øn t·ª´ kh√≥a ti·∫øp theo, lo·∫°i b·ªè d·∫•u ';' ·ªü ƒë·∫ßu
        content = parts[i+1].strip().lstrip(';').strip()
        schedule_parts.append({"shift": keyword, "staff": content})
        i += 2
        
    return schedule_parts

def create_schedule_flex_message(schedule_type, schedule_text):
    """T·∫°o tin nh·∫Øn Flex Message cho l·ªãch l√†m vi·ªác v·ªõi giao di·ªán m·ªõi."""
    if schedule_type == 'pg':
        title = "L·ªäCH L√ÄM VI·ªÜC PG H√îM NAY"
        header_color = "#FF6B6B" # M√†u h·ªìng
    else: # employee
        title = "L·ªäCH L√ÄM VI·ªÜC NH√ÇN VI√äN"
        header_color = "#4D96FF" # M√†u xanh d∆∞∆°ng

    # Icon cho t·ª´ng ca
    shift_icons = {
        "Ca S√°ng": "‚òÄÔ∏è",
        "Ca Chi·ªÅu": "üåô",
        "Ngh·ªâ": "‚ö™Ô∏è",
        "V·ªá Sinh Kho": "üßπ"
    }

    parsed_schedule = parse_schedule_text(schedule_text)
    
    body_components = []
    for part in parsed_schedule:
        shift_name = part["shift"]
        staff_list = part["staff"]
        icon = shift_icons.get(shift_name, "üìå")

        section_component = {
            "type": "box",
            "layout": "vertical",
            "margin": "lg",
            "spacing": "sm",
            "contents": [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "spacing": "md",
                    "contents": [
                        {
                            "type": "text",
                            "text": icon,
                            "flex": 0,
                            "gravity": "center"
                        },
                        {
                            "type": "text",
                            "text": shift_name,
                            "weight": "bold",
                            "color": "#111111",
                            "size": "md"
                        }
                    ]
                },
                {
                    "type": "text",
                    "text": staff_list,
                    "wrap": True,
                    "size": "sm",
                    "color": "#555555",
                    "margin": "md"
                },
                {
                    "type": "separator",
                    "margin": "lg"
                }
            ]
        }
        body_components.append(section_component)
    
    # X√≥a separator cu·ªëi c√πng ƒë·ªÉ ƒë·∫πp h∆°n
    if body_components:
        body_components[-1]['contents'].pop()

    flex_content = {
      "type": "bubble",
      "size": "giga",
      "header": {
        "type": "box",
        "layout": "horizontal",
        "alignItems": "center",
        "spacing": "md",
        "contents": [
          {
            "type": "text",
            "text": "üìÖ",
            "flex": 0,
            "size": "xl"
          },
          {
            "type": "text",
            "text": title,
            "color": "#FFFFFF",
            "weight": "bold",
            "size": "md", # Gi·∫£m size ch·ªØ ti√™u ƒë·ªÅ ƒë·ªÉ kh√¥ng b·ªã tr√†n
            "wrap": True
          }
        ],
        "backgroundColor": header_color,
        "paddingTop": "12px",
        "paddingBottom": "12px"
      },
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": body_components,
        "paddingAll": "md"
      }
    }
    return flex_content

def send_daily_schedule(schedule_type):
    """H√†m ch√≠nh ƒë·ªÉ t√¨m v√† g·ª≠i l·ªãch l√†m vi·ªác h√†ng ng√†y."""
    print(f"B·∫Øt ƒë·∫ßu g·ª≠i l·ªãch l√†m vi·ªác cho nh√≥m: {schedule_type}")
    
    if schedule_type == 'pg':
        target_group_id = os.environ.get('PG_GROUP_ID')
        column_to_read = 'pg_schedule'
    elif schedule_type == 'employee':
        target_group_id = os.environ.get('EMPLOYEE_GROUP_ID')
        column_to_read = 'employee_schedule'
    else:
        print(f"L·ªói: Lo·∫°i l·ªãch '{schedule_type}' kh√¥ng h·ª£p l·ªá.")
        return

    if not target_group_id:
        print(f"C·∫¢NH B√ÅO: B·ªè qua g·ª≠i l·ªãch v√¨ bi·∫øn m√¥i tr∆∞·ªùng cho '{schedule_type}' ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        return

    try:
        sheet = CLIENT.open(SHEET_NAME).worksheet(WORKSHEET_SCHEDULES_NAME)
        all_schedules = sheet.get_all_records()
        today_str = get_vietnamese_day_of_week()
        
        schedule_text_today = None
        for row in all_schedules:
            if row.get('day_of_week') == today_str:
                schedule_text_today = row.get(column_to_read)
                break
        
        if schedule_text_today:
            print(f"T√¨m th·∫•y l·ªãch cho {today_str}: {schedule_text_today}")
            flex_message_content = create_schedule_flex_message(schedule_type, schedule_text_today)
            message = FlexSendMessage(
                alt_text=f"L·ªãch l√†m vi·ªác h√¥m nay cho {schedule_type}",
                contents=flex_message_content
            )
            line_bot_api.push_message(target_group_id, message)
            print(f"G·ª≠i l·ªãch th√†nh c√¥ng ƒë·∫øn group ID: {target_group_id}")
        else:
            print(f"Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác cho {today_str} trong sheet.")
            line_bot_api.push_message(target_group_id, TextSendMessage(text=f"Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác cho h√¥m nay ({today_str})."))

    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng khi g·ª≠i l·ªãch l√†m vi·ªác: {e}")

